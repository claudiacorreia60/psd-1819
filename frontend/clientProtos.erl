%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(clientProtos).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'Message'() ::
      #{type                    => iolist(),        % = 1
        amount                  => integer(),       % = 2, 32 bits
        interest                => integer(),       % = 3, 32 bits
        company                 => iolist(),        % = 4
        auth                    => 'Authentication'(), % = 5
        res                     => 'Result'(),      % = 6
        'not'                   => 'Notification'() % = 7
       }.

-type 'Authentication'() ::
      #{username                => iolist(),        % = 1
        password                => iolist()         % = 2
       }.

-type 'Result'() ::
      #{result                  => boolean() | 0 | 1, % = 1
        entity                  => iolist()         % = 2
       }.

-type 'Notification'() ::
      #{status                  => iolist(),        % = 1
        action                  => iolist()         % = 2
       }.

-export_type(['Message'/0, 'Authentication'/0, 'Result'/0, 'Notification'/0]).

-spec encode_msg('Message'() | 'Authentication'() | 'Result'() | 'Notification'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('Message'() | 'Authentication'() | 'Result'() | 'Notification'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' ->
	  encode_msg_Message(id(Msg, TrUserData), TrUserData);
      'Authentication' ->
	  encode_msg_Authentication(id(Msg, TrUserData),
				    TrUserData);
      'Result' ->
	  encode_msg_Result(id(Msg, TrUserData), TrUserData);
      'Notification' ->
	  encode_msg_Notification(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Message(Msg, TrUserData) ->
    encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{amount := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{interest := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{company := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{auth := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 e_mfield_Message_auth(TrF5, <<B4/binary, 42>>,
				       TrUserData)
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{res := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 e_mfield_Message_res(TrF6, <<B5/binary, 50>>,
				      TrUserData)
	       end;
	   _ -> B5
	 end,
    case M of
      #{'not' := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    e_mfield_Message_not(TrF7, <<B6/binary, 58>>,
				 TrUserData)
	  end;
      _ -> B6
    end.

encode_msg_Authentication(Msg, TrUserData) ->
    encode_msg_Authentication(Msg, <<>>, TrUserData).


encode_msg_Authentication(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{username := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{password := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Result(Msg, TrUserData) ->
    encode_msg_Result(Msg, <<>>, TrUserData).


encode_msg_Result(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{result := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{entity := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Notification(Msg, TrUserData) ->
    encode_msg_Notification(Msg, <<>>, TrUserData).


encode_msg_Notification(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{status := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{action := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	  end;
      _ -> B1
    end.

e_mfield_Message_auth(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Authentication(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_res(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Result(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_not(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Notification(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Message', Bin, TrUserData) ->
    id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Authentication', Bin, TrUserData) ->
    id(decode_msg_Authentication(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Result', Bin, TrUserData) ->
    id(decode_msg_Result(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Notification', Bin, TrUserData) ->
    id(decode_msg_Notification(Bin, TrUserData),
       TrUserData).



decode_msg_Message(Bin, TrUserData) ->
    dfp_read_field_def_Message(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Message(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_amount(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_interest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_company(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_auth(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_res(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    d_field_Message_not(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{amount => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{interest => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{company => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{auth => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{res => F@_6}
	 end,
    if F@_7 == '$undef' -> S7;
       true -> S7#{'not' => F@_7}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_Message(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Message_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_Message_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_Message_interest(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_Message_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_Message_auth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_Message_res(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_Message_not(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_Message(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
	    3 ->
		skip_group_Message(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_Message(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_Message(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{type => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{amount => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{interest => F@_3}
	 end,
    S5 = if F@_4 == '$undef' -> S4;
	    true -> S4#{company => F@_4}
	 end,
    S6 = if F@_5 == '$undef' -> S5;
	    true -> S5#{auth => F@_5}
	 end,
    S7 = if F@_6 == '$undef' -> S6;
	    true -> S6#{res => F@_6}
	 end,
    if F@_7 == '$undef' -> S7;
       true -> S7#{'not' => F@_7}
    end.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Message_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Message_amount(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_Message_amount(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Message_amount(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Message_interest(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 57 ->
    d_field_Message_interest(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
d_field_Message_interest(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_Message_company(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_Message_company(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_Message_company(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_Message_auth(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Message_auth(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Message_auth(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Authentication(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Authentication(Prev, NewFValue,
							       TrUserData)
			       end,
			       F@_6, F@_7, TrUserData).

d_field_Message_res(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Message_res(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Message_res(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Result(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Result(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_7, TrUserData).

d_field_Message_not(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_Message_not(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_Message_not(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Notification(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Message(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_Notification(Prev, NewFValue,
							     TrUserData)
			       end,
			       TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_Message(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Message(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_Message(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_Message(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_Authentication(Bin, TrUserData) ->
    dfp_read_field_def_Authentication(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Authentication(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Authentication_username(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_Authentication(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_Authentication_password(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_Authentication(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{password => F@_2}
    end;
dfp_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_Authentication(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Authentication(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_Authentication(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Authentication_username(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_Authentication_password(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Authentication(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_Authentication(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_Authentication(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_Authentication(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_Authentication(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_Authentication(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{username => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{password => F@_2}
    end.

d_field_Authentication_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Authentication_username(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Authentication_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_Authentication_password(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Authentication_password(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_Authentication_password(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_Authentication(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Authentication(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_Authentication(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_Authentication(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Authentication(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Authentication(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Authentication(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_Authentication(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Authentication(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_Authentication(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_Authentication(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_Result(Bin, TrUserData) ->
    dfp_read_field_def_Result(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Result(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Result_result(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Result(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_Result_entity(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Result(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{entity => F@_2}
    end;
dfp_read_field_def_Result(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_Result(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_Result(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Result(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_Result(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Result_result(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_Result_entity(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Result(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Result(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_Result(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_Result(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Result(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{result => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{entity => F@_2}
    end.

d_field_Result_result(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Result_result(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Result_result(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Result(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_Result_entity(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Result_entity(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Result_entity(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Result(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_Result(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_Result(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_Result(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Result(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_Result(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Result(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_Result(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Result(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_Result(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Result(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_Result(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Result(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_Result(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_Result(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_Notification(Bin, TrUserData) ->
    dfp_read_field_def_Notification(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Notification(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_Notification_status(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_Notification(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_Notification_action(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_Notification(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{status => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{action => F@_2}
    end;
dfp_read_field_def_Notification(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_Notification(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_Notification(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Notification(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_Notification(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Notification_status(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_Notification_action(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Notification(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_Notification(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_Notification(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_Notification(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_Notification(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Notification(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{status => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{action => F@_2}
    end.

d_field_Notification_status(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Notification_status(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_Notification_status(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notification(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_Notification_action(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Notification_action(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_Notification_action(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Notification(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_Notification(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_Notification(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_Notification(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Notification(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_Notification(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Notification(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_Notification(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Notification(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_Notification(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Notification(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_Notification(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Notification(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_Notification(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Notification(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> merge_msg_Message(Prev, New, TrUserData);
      'Authentication' ->
	  merge_msg_Authentication(Prev, New, TrUserData);
      'Result' -> merge_msg_Result(Prev, New, TrUserData);
      'Notification' ->
	  merge_msg_Notification(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{amount := NFamount}} -> S2#{amount => NFamount};
	   {#{amount := PFamount}, _} -> S2#{amount => PFamount};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{interest := NFinterest}} ->
	       S3#{interest => NFinterest};
	   {#{interest := PFinterest}, _} ->
	       S3#{interest => PFinterest};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{company := NFcompany}} ->
	       S4#{company => NFcompany};
	   {#{company := PFcompany}, _} ->
	       S4#{company => PFcompany};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{auth := PFauth}, #{auth := NFauth}} ->
	       S5#{auth =>
		       merge_msg_Authentication(PFauth, NFauth, TrUserData)};
	   {_, #{auth := NFauth}} -> S5#{auth => NFauth};
	   {#{auth := PFauth}, _} -> S5#{auth => PFauth};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {#{res := PFres}, #{res := NFres}} ->
	       S6#{res => merge_msg_Result(PFres, NFres, TrUserData)};
	   {_, #{res := NFres}} -> S6#{res => NFres};
	   {#{res := PFres}, _} -> S6#{res => PFres};
	   {_, _} -> S6
	 end,
    case {PMsg, NMsg} of
      {#{'not' := PFnot}, #{'not' := NFnot}} ->
	  S7#{'not' =>
		  merge_msg_Notification(PFnot, NFnot, TrUserData)};
      {_, #{'not' := NFnot}} -> S7#{'not' => NFnot};
      {#{'not' := PFnot}, _} -> S7#{'not' => PFnot};
      {_, _} -> S7
    end.

-compile({nowarn_unused_function,merge_msg_Authentication/3}).
merge_msg_Authentication(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{username := NFusername}} ->
	       S1#{username => NFusername};
	   {#{username := PFusername}, _} ->
	       S1#{username => PFusername};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{password := NFpassword}} ->
	  S2#{password => NFpassword};
      {#{password := PFpassword}, _} ->
	  S2#{password => PFpassword};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Result/3}).
merge_msg_Result(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{result := NFresult}} -> S1#{result => NFresult};
	   {#{result := PFresult}, _} -> S1#{result => PFresult};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{entity := NFentity}} -> S2#{entity => NFentity};
      {#{entity := PFentity}, _} -> S2#{entity => PFentity};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Notification/3}).
merge_msg_Notification(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{status := NFstatus}} -> S1#{status => NFstatus};
	   {#{status := PFstatus}, _} -> S1#{status => PFstatus};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{action := NFaction}} -> S2#{action => NFaction};
      {#{action := PFaction}, _} -> S2#{action => PFaction};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
      'Authentication' ->
	  v_msg_Authentication(Msg, [MsgName], TrUserData);
      'Result' -> v_msg_Result(Msg, [MsgName], TrUserData);
      'Notification' ->
	  v_msg_Notification(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  v_type_string(F1, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{amount := F2} ->
	  v_type_int32(F2, [amount | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{interest := F3} ->
	  v_type_int32(F3, [interest | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{company := F4} ->
	  v_type_string(F4, [company | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{auth := F5} ->
	  v_msg_Authentication(F5, [auth | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{res := F6} ->
	  v_msg_Result(F6, [res | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{'not' := F7} ->
	  v_msg_Notification(F7, ['not' | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (amount) -> ok;
		      (interest) -> ok;
		      (company) -> ok;
		      (auth) -> ok;
		      (res) -> ok;
		      ('not') -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Message'},
		  M, Path);
v_msg_Message(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_Authentication/3}).
-dialyzer({nowarn_function,v_msg_Authentication/3}).
v_msg_Authentication(#{} = M, Path, TrUserData) ->
    case M of
      #{username := F1} ->
	  v_type_string(F1, [username | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{password := F2} ->
	  v_type_string(F2, [password | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (username) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Authentication(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Authentication'},
		  M, Path);
v_msg_Authentication(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Authentication'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Result/3}).
-dialyzer({nowarn_function,v_msg_Result/3}).
v_msg_Result(#{} = M, Path, TrUserData) ->
    case M of
      #{result := F1} ->
	  v_type_bool(F1, [result | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{entity := F2} ->
	  v_type_string(F2, [entity | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (result) -> ok;
		      (entity) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Result(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Result'},
		  M, Path);
v_msg_Result(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Result'}, X, Path).

-compile({nowarn_unused_function,v_msg_Notification/3}).
-dialyzer({nowarn_function,v_msg_Notification/3}).
v_msg_Notification(#{} = M, Path, TrUserData) ->
    case M of
      #{status := F1} ->
	  v_type_string(F1, [status | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{action := F2} ->
	  v_type_string(F2, [action | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
		      (action) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Notification(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Notification'},
		  M, Path);
v_msg_Notification(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Notification'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Message'},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => amount, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []},
       #{name => interest, fnum => 3, rnum => 4, type => int32,
	 occurrence => optional, opts => []},
       #{name => company, fnum => 4, rnum => 5, type => string,
	 occurrence => optional, opts => []},
       #{name => auth, fnum => 5, rnum => 6,
	 type => {msg, 'Authentication'}, occurrence => optional,
	 opts => []},
       #{name => res, fnum => 6, rnum => 7,
	 type => {msg, 'Result'}, occurrence => optional,
	 opts => []},
       #{name => 'not', fnum => 7, rnum => 8,
	 type => {msg, 'Notification'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'Authentication'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => password, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, 'Result'},
      [#{name => result, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []},
       #{name => entity, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'Notification'},
      [#{name => status, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => action, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    ['Message', 'Authentication', 'Result', 'Notification'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Message', 'Authentication', 'Result', 'Notification'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Message') ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => amount, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []},
     #{name => interest, fnum => 3, rnum => 4, type => int32,
       occurrence => optional, opts => []},
     #{name => company, fnum => 4, rnum => 5, type => string,
       occurrence => optional, opts => []},
     #{name => auth, fnum => 5, rnum => 6,
       type => {msg, 'Authentication'}, occurrence => optional,
       opts => []},
     #{name => res, fnum => 6, rnum => 7,
       type => {msg, 'Result'}, occurrence => optional,
       opts => []},
     #{name => 'not', fnum => 7, rnum => 8,
       type => {msg, 'Notification'}, occurrence => optional,
       opts => []}];
find_msg_def('Authentication') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => password, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def('Result') ->
    [#{name => result, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []},
     #{name => entity, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('Notification') ->
    [#{name => status, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => action, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
